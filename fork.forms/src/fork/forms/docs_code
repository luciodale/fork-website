
(ns fork.app
  (:require
   [fork.fork :as f]))


(defn component []
  (let [[{:keys
          [values
           handle-change
           handle-blur]}]
        (f/fork {:initial-values
                 {"input" "Type here!"}})]
    [:form
     [:input.some-style
      {:name "input"
       :value (get values "input")
       :type "text"
       :on-change handle-change
       :on-blur handle-blur}]]))


(defn on-submit
[{:keys [values set-submitting]}]
  (js/setTimeout
   (fn [_]
     (js/alert values)
     (set-submitting false)) 300))


(defn component []
  (let [[{:keys
          [values
           handle-change
           handle-blur
           handle-submit
           is-submitting?]}]
        (f/fork {:initial-values
                 {"input" "Type here!"}
                 :prevent-default? true
                 :on-submit on-submit})]
    [:form
     {:on-submit handle-submit}
     [:input.some-style
      {:name "input"
       :value (get values "input")
       :type "text"
       :on-change handle-change
       :on-blur handle-blur}]
     [:button
      {:type "submit"
       :disabled is-submitting?}
      "Submit!"]]))


(defn validation
  [values]
  {:client
   {:on-change
    {"input"
     [[(> (count (values "input")) 5)
       {:smaller-than-5
        "Must be bigger than 5"}]
      [(= (values "input") "hello fork!")
       {:must-equal-text
        "Must equal hello fork!"}]]}}})


(defn component []
  (let [[{:keys
          [values
           errors
           touched
           handle-change
           handle-blur
           handle-submit
           is-submitting?]}]
        (f/fork {:initial-values
                 {"input" "Type here!"}
                 :prevent-default? true
                 :on-submit on-submit
                 :validation validation})]
    [:form
     {:on-submit handle-submit}
     [:input.some-style
      {:name "input"
       :value (get values "input")
       :type "text"
       :on-change handle-change
       :on-blur handle-blur}]
     (when (and (get errors "input")
                (get touched "input"))
       (for [[k msg] (get errors "input")]
         [:p.help {:key k}
          msg]))
     [:button
      {:type "submit"
       :disabled is-submitting?}
      "Submit!"]]))


(defn on-submit
  [{:keys [values set-submitting
           is-invalid?]}]
  (if is-invalid?
    (set-submitting false)
    (js/setTimeout
     (fn [_]
       (js/alert values)
       (set-submitting false)) 300)))


(defn second []
  "dkjnfkdj")

(defn fixed-navbar []
  (html
   (let [[state update-state] (r/useState nil)]
     [:nav.navbar.fixed-navbar
      [:div.navbar-brand
       [:a.navbar-item.fixed-navbar__brand
        {:href (routing/href-go! :index)}
        [:img {:src "/images/logo-white.svg"
               :width "30"}]
        [:p.fixed-navbar__brand-name "Fork"]]
       ]
      ])))

(defn fixed-navbar []
  (html
   (let [[state update-state] (r/useState nil)]
     [:nav.navbar.fixed-navbar
      [:div.navbar-brand
       [:a.navbar-item.fixed-navbar__brand
        {:href (routing/href-go! :index)}
        [:img {:src "/images/logo-white.svg"
               :width "30"}]
        [:p.fixed-navbar__brand-name "Fork"]]
       ]
      ])))

(defn fixed-navbar []
  (html
   (let [[state update-state] (r/useState nil)]
     [:nav.navbar.fixed-navbar
      [:div.navbar-brand
       [:a.navbar-item.fixed-navbar__brand
        {:href (routing/href-go! :index)}
        [:img {:src "/images/logo-white.svg"
               :width "30"}]
        [:p.fixed-navbar__brand-name "Fork"]]
       ]
      ])))
